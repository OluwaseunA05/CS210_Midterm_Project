#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
using namespace std;

struct School {

public:
string name;
string address;
string city;
string state;
string county;

School* next;

School(string name, string address, string city, string state, string county) {

this -> name = name;
this -> address = address;
this -> city = city;
this -> state = state;
this -> county = county;

next =  nullptr;


}

 class CSVReader {
public:
 static vector<vector<string>> readCSV(const string& filename) {
  ifstream file(filename);
  vector<vector<string>> data;
  string line, word;

  if (!file.is_open()) {
   cerr << "Error: Could not open file " << filename << endl;
   return data;
  }

  while (getline(file, line)) {
   stringstream ss(line);
   vector<string> row;
   while (getline(ss, word, ',')) {
    row.push_back(word);
   }
   data.push_back(row);
  }
  file.close();
  return data;
 }
};

};


class SchoolBST 
{

insert( School school) {



}

deleteByName (string name) {




}


findByName(string name) {
School* temp = head;




}


displayInOrder() {






}



displayPreOrder {






}



displayPostOrder {





}



}

class SchoolList {

private:

School* head;

public:

SchoolList() {

head = nullptr;


}

void insertFirst(School school) {

School* newSchool = new School (school.name, school.address, school.city, school.state, school.county);
newSchool -> next = head;
head = newSchool;

}

void insertLast(School school) {

School* newSchool = new School (school.name, school.address, school.city, school.state, school.county);

if ( head == nullptr ) {

head = newSchool ;
return;


}



School* temp= head;
while (temp-> next!= nullptr) {

temp = temp-> next;

}

temp->next = newSchool;

}


void display() {

School* temp = head;

while (temp != nullptr) {


 cout << "Name: " << temp->name << endl;
 cout << "Address: " << temp->address << endl;
 cout << "City: " << temp->city << endl;
 cout << "State: " << temp->state << endl;
 cout << "County: " << temp->county << endl;

temp = temp -> next;

 }

}


void deleteByName(string name) {

if(!head) {
 return;

}

if (head->name == name)  {
School* temp = head;
head = head->next;
delete temp;
return ;


}

School* temp = head;
School* prev = nullptr;

 while (temp && temp->name != name) {
        prev = temp;
        temp = temp->next;
    }

 if (!temp) return;

prev->next = temp->next;
    delete temp;


}


bool findByName (string name) {
School* temp = head;

while (temp) {
if (temp -> name == name) {

   return true;

 }

temp = temp->next;

}

return false;
}


void loadData (string filename) {

vector <vector<string>> data = School :: CSVReader :: readCSV(filename);

for ( size_t i = 1; i < data.size(); i++) {

if (data[i].size() < 5) continue;

School school(data[i][0], data[i][1], data[i][2], data[i][3], data[i][4]);
insertLast(school);

}



}

};


int main() {

 SchoolList schoolList;

 schoolList.loadData("schools.csv");

 schoolList.display();

 return 0;

}
