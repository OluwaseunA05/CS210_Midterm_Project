#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>

using namespace std;

struct School {
    string name;
    string address;
    string city;
    string state;
    string county;
    School* next;
    School* left;
    School* right;

    School(string name, string address, string city, string state, string county)
        : name(name), address(address), city(city), state(state), county(county), next(nullptr), left(nullptr), right(nullptr) {}
};

class CSVReader {
public:
    static vector<vector<string>> readCSV(const string& filename) {
        ifstream file(filename);
        vector<vector<string>> data;
        string line, word;

        if (!file.is_open()) {
            cerr << "Error: Could not open file " << filename << endl;
            return data;
        }

        while (getline(file, line)) {
            stringstream ss(line);
            vector<string> row;
            while (getline(ss, word, ',')) {
                row.push_back(word);
            }
            data.push_back(row);
        }
        file.close();
        return data;
    }
};

class SchoolBST {
private:
    School* root;

    School* insert(School* node, School* newSchool) {
        if (!node) return newSchool;
        if (newSchool->name < node->name)
            node->left = insert(node->left, newSchool);
        else
            node->right = insert(node->right, newSchool);
        return node;
    }

    void displayInOrder(School* node) {
        if (!node) return;
        displayInOrder(node->left);
        cout << "Name: " << node->name << endl;
        displayInOrder(node->right);
    }

public:
    SchoolBST() : root(nullptr) {}

    void insert(School school) {
        School* newSchool = new School(school.name, school.address, school.city, school.state, school.county);
        root = insert(root, newSchool);
    }

    void displayInOrder() {
        displayInOrder(root);
    }
};

class SchoolHashTable {
private:
    vector<School*> table;
    int capacity;

    int hashFunction(const string& key) {
        int hash = 0;
        for (char ch : key) {
            hash += ch;
        }
        return hash % capacity;
    }

public:
    SchoolHashTable(int size) : capacity(size) {
        table.resize(capacity, nullptr);
    }

    void insert(School school) {
        int index = hashFunction(school.name);
        School* newSchool = new School(school.name, school.address, school.city, school.state, school.county);
        newSchool->next = table[index];
        table[index] = newSchool;
    }

    void deleteByName(string name) {
        int index = hashFunction(name);
        School* temp = table[index];
        School* prev = nullptr;

        while (temp && temp->name != name) {
            prev = temp;
            temp = temp->next;
        }

        if (!temp) {
            cout << "School not found!" << endl;
            return;
        }

        if (!prev) {
            table[index] = temp->next;
        } else {
            prev->next = temp->next;
        }
        delete temp;
    }

    School* findByName(string name) {
        int index = hashFunction(name);
        School* temp = table[index];

        while (temp) {
            if (temp->name == name) {
                return temp;
            }
            temp = temp->next;
        }
        return nullptr;
    }

    void display() {
        for (int i = 0; i < capacity; i++) {
            if (table[i] != nullptr) {
                School* temp = table[i];
                while (temp) {
                    cout << "Index " << i << ": " << temp->name << endl;
                    temp = temp->next;
                }
            }
        }
    }
};

int main() {
    SchoolHashTable schoolTable(100);
    vector<vector<string>> data = CSVReader::readCSV("schools.csv");
    SchoolBST schoolTree;

    for (size_t i = 1; i < data.size(); i++) {
        if (data[i].size() < 5) continue;
        School school(data[i][0], data[i][1], data[i][2], data[i][3], data[i][4]);
        schoolTable.insert(school);
        schoolTree.insert(school);
    }

    schoolTable.display();
    schoolTree.displayInOrder();

    string searchName;
    cout << "Enter school name to search: ";
    cin >> searchName;
    School* found = schoolTable.findByName(searchName);
    if (found) {
        cout << "Found: " << found->name << endl;
    } else {
        cout << "School not found." << endl;
    }

    cout << "Enter school name to delete: ";
    cin >> searchName;
    schoolTable.deleteByName(searchName);

    schoolTable.display();

    return 0;
}
